abc077_b.rs
##############################################
##############################################
##############################################
##############################################
##############################################
##############################################
##############################################
##############################################
use proconio::input;
fn main() {
    input! {
        n: i32,
    }
    let mut i = 1;
    while i * i <= n {
        i += 1;
    }
    println!("{}", (i - 1).pow(2));
}
##############################################
use proconio::input;
fn main() {
    input! {
        n: f64,
    }
    let ans = n.sqrt().floor().powf(2.);
    println!("{}", ans);
}
##############################################
use num::integer::Roots;
use proconio::*;
fn main() {
    input! {n: usize}
    let sqrt = n.sqrt();
    println!("{}", sqrt.pow(2))
}
##############################################
use proconio::input;
fn main() {
    input! {
        n: usize,
    }
    for i in 1..=n+1 {
        if i.pow(2) > n {
            println!("{}", (i-1).pow(2));
            return;
        }
    }
}
##############################################
[my ac]
use proconio::input;
fn main() {
    input! { n: usize }
    let m = (n as f64).sqrt() as usize;
    println!("{}", m * m);
}
##############################################
[python]
import math
n=int(input())
m=int(math.sqrt(n))
print(m**2)
##############################################
